datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model DiscordProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String
  email String

  servers DiscordServer[]
  members DiscordMember[]
  channels DiscordChannel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscordServer {
   id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String
  inviteCode String
  
  profileId String @db.ObjectId
  profile DiscordProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members DiscordMember[]
  channels DiscordChannel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum DiscordMemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model DiscordMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role DiscordMemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile DiscordProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum DiscordChannelType {
  TEXT
  AUDIO
  VIDEO
}

model DiscordChannel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type DiscordChannelType @default(TEXT)

  profileId String @db.ObjectId
  profile DiscordProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}